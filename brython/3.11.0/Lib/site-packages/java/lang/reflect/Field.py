from sun.reflect.FieldAccessor import FieldAccessor
from sun.reflect.Reflection import Reflection
from sun.reflect.generics.repository.FieldRepository import FieldRepository
from sun.reflect.generics.factory.CoreReflectionFactory import CoreReflectionFactory
from sun.reflect.generics.factory.GenericsFactory import GenericsFactory
from sun.reflect.generics.scope.ClassScope import ClassScope
from java.lang.annotation.Annotation import Annotation
from java.util.Map import Map
from sun.reflect.annotation.AnnotationParser import AnnotationParser

class Field(AccessibleObject, Member):
	""" generated source for class Field """
	clazz = Class()
	slot = int()
	name = str()
	type_ = Class()
	modifiers = int()
	signature = str()
	genericInfo = FieldRepository()
	annotations = []
	fieldAccessor = FieldAccessor()
	overrideFieldAccessor = FieldAccessor()
	root = Field()

	def getGenericSignature(self):
		""" generated source for method getGenericSignature """
		return self.signature

	def getFactory(self):
		""" generated source for method getFactory """
		c = getDeclaringClass()
		return CoreReflectionFactory.make(c, ClassScope.make(c))

	def getGenericInfo(self):
		""" generated source for method getGenericInfo """
		if self.genericInfo == None:
			self.genericInfo = FieldRepository.make(getGenericSignature(), getFactory())
		return self.genericInfo

	def __init__(self, declaringClass, name, type_, modifiers, slot, signature, annotations):
		""" generated source for method __init__ """
		super(Field, self).__init__()
		self.clazz = declaringClass
		self.name = name
		self.type_ = type_
		self.modifiers = modifiers
		self.slot = slot
		self.signature = signature
		self.annotations = annotations

	def copy(self):
		""" generated source for method copy """
		res = Field(self.clazz, self.name, self.type_, self.modifiers, self.slot, self.signature, self.annotations)
		res.root = self
		res.fieldAccessor = fieldAccessor
		res.overrideFieldAccessor = overrideFieldAccessor
		return res

	def getDeclaringClass(self):
		""" generated source for method getDeclaringClass """
		return self.clazz

	def getName(self):
		""" generated source for method getName """
		return self.name

	def getModifiers(self):
		""" generated source for method getModifiers """
		return self.modifiers

	def isEnumConstant(self):
		""" generated source for method isEnumConstant """
		return (self.getModifiers() & Modifier.ENUM) != 0

	def isSynthetic(self):
		""" generated source for method isSynthetic """
		return Modifier.isSynthetic(self.getModifiers())

	def getType(self):
		""" generated source for method getType """
		return self.type_
	
	def getGenericType(self):
		""" generated source for method getGenericType """
		if getGenericSignature() != None:
			return getGenericInfo().getGenericType()
		else:
			return getType()

	def equals(self, obj):
		""" generated source for method equals """
		if obj != None and isinstance(obj, (Field, )):
			return (getDeclaringClass() == other.getDeclaringClass()) and (getName() == other.__name__) and (getType() == other.getType())
		return False

	def hashCode(self):
		""" generated source for method hashCode """
		return getDeclaringClass().__name__.hashCode() ^ getName().hashCode()

	def toString(self):
		""" generated source for method toString """
		mod = getModifiers()
		return (("" if (mod == 0) else (Modifier.toString(mod) + " ")) + getTypeName(getType()) + " " + getTypeName(getDeclaringClass()) + "." + getName())

	def toGenericString(self):
		""" generated source for method toGenericString """
		mod = getModifiers()
		fieldType = getGenericType()
		return (("" if (mod == 0) else (Modifier.toString(mod) + " ")) + (getTypeName(Class(fieldType)) if (isinstance(fieldType, (Class, ))) else fieldType.__str__()) + " " + getTypeName(getDeclaringClass()) + "." + getName())

	def get(self, obj):
		""" generated source for method get """
		return getFieldAccessor(obj).get(obj)

	def getBoolean(self, obj):
		""" generated source for method getBoolean """
		return getFieldAccessor(obj).getBoolean(obj)

	def getByte(self, obj):
		""" generated source for method getByte """
		return getFieldAccessor(obj).getByte(obj)

	def getChar(self, obj):
		""" generated source for method getChar """
		return getFieldAccessor(obj).getChar(obj)

	def getShort(self, obj):
		""" generated source for method getShort """
		return getFieldAccessor(obj).getShort(obj)

	def getDouble(self, obj):
		""" generated source for method getDouble """
		return getFieldAccessor(obj).getDouble(obj)
	def set(self, obj, value):
		""" generated source for method set """
		getFieldAccessor(obj).set(obj, value)

	def setBoolean(self, obj, z):
		""" generated source for method setBoolean """
		getFieldAccessor(obj).setBoolean(obj, z)
